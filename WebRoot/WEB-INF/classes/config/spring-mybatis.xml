<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
                        http://www.springframework.org/schema/task 
                        http://www.springframework.org/schema/task/spring-task-4.1.xsd">

    <!-- 自动扫描注入,这个是放dao，demin，mapping的包的名字 ,且不扫描controller-->  
    <context:component-scan base-package="com.gnnt" > 
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>  
    </context:component-scan> 

    <!-- 引入配置文件 -->
    <!-- 加载数据库参数 -->
    <context:property-placeholder location="classpath*:config/jdbc.properties" ignore-unresolvable="true"/>  

    <!-- 配置DataSource数据源 -->  
    <!-- 阿里 druid 数据库连接池 -->
    <bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource" destroy-method = "close">  
         <!-- 数据库基本信息配置 -->
         <property name = "url" value = "${druid.jdbc_url}" />  
         <property name = "username" value = "${druid.username}" />  
         <property name = "password" value = "${druid.password}" />  
         <property name = "driverClassName" value = "${druid.driver}" />  
         <!-- 最大并发连接数 -->
         <property name = "maxActive" value = "${druid.maxActive}" />
         <!-- 初始化连接数量 -->
         <property name = "initialSize" value = "${druid.initialSize}" />
         <!-- 配置获取连接等待超时的时间 -->
         <property name = "maxWait" value = "${druid.maxWait}" />
         <!-- 最小空闲连接数 -->
         <property name = "minIdle" value = "${druid.minIdle}" />  
         <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name = "timeBetweenEvictionRunsMillis" value ="${druid.timeBetweenEvictionRunsMillis}" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name = "minEvictableIdleTimeMillis" value ="${druid.minEvictableIdleTimeMillis}" />  
         <property name = "validationQuery" value = "${druid.validationQuery}" />  
         <property name = "testWhileIdle" value = "${druid.testWhileIdle}" />  
         <property name = "testOnBorrow" value = "${druid.testOnBorrow}" />  
         <property name = "testOnReturn" value = "${druid.testOnReturn}" />  
         <property name = "maxOpenPreparedStatements" value ="${druid.maxOpenPreparedStatements}" />
         <!-- 打开 removeAbandoned 功能 -->
         <property name = "removeAbandoned" value = "${druid.removeAbandoned}" />
         <!-- 1800 秒，也就是 30 分钟 -->
         <property name = "removeAbandonedTimeout" value ="${druid.removeAbandonedTimeout}" />
         <!-- 关闭 abanded 连接时输出错误日志 -->   
         <property name = "logAbandoned" value = "${druid.logAbandoned}" />
         <!-- ******重要的配置：监控统计拦截的filters,日志记录 *start* ******-->
         <!-- 并在filters属性中配置了log4j，ref中的bean是下面拦截器的配置 -->
         <!-- proxyFilters和filters是组合关系,前者是根据bean配置,后者根据别名配置的-->
         <!-- stat是statfilter的别名,log4j是logFilter的别名-->
         <!-- 监控统计拦截的filters,日志记录,这里开启了stat,wall（sql翻过墙过滤监控）,log4j（log4j的监控）配置 -->
         <!-- 这里是以代理模式过滤stat和log的，所以用的两个bean分别是stat监控，log日志记录监控。 -->
         <property name="proxyFilters">
            <list>
                <ref bean="statfilter" />
                <ref bean="logFilter" />
            </list>
         </property>
         <!-- 这句的配置才是在控制台打印sql的重点，建议平时开发中，打开该配置，上线的时候关闭掉，原因就是上面提到的，写日志很占空间。 -->
         <!-- <property name = "filters" value = "${druid.filters}" />   -->
         <!-- 放置SQL依赖注入 -->
         <property name = "filters" value = "wall" /> 
         <!--  *end* -->

    </bean>

    <!-- 慢SQL记录 *start* -->
    <bean id="statfilter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- 开启合并sql -->
        <property name="mergeSql" value="true" />
        <!-- 开启慢查询语句,1秒 -->
        <property name="slowSqlMillis" value="1000" />
        <property name="logSlowSql" value="true" />
    </bean>

    <bean id="logFilter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <!-- <property name="resultSetLogEnabled" value="false" /> -->
        <!-- <property name="statementExecutableSqlLogEnable" value="true" /> -->
    </bean>
    <!-- 慢SQL记录  *end* -->


    <!-- 配置SqlSessionFactoryBean --> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
        <property name="dataSource" ref="dataSource"/>  
        <property name="configLocation" value="classpath:config/mybatis-config.xml"/> 
        <!-- mapper和resultmap配置路径   -->
        <property name="mapperLocations" value="classpath:com/gnnt/dao/*.xml"></property> 
    </bean>

    <!-- 通过扫描的模式，扫描在com.dao目录下的所有mapper -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.gnnt.dao"/>  
    </bean>

    <!-- 创建一个sqlSession实例，线程安全的，可以在所有DAO实例共享，原理是将sqlSession，事务与当前线程挂钩 -->
    <bean name="sqlSessionTemplateASS" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>

    <!-- 事务相关控制 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 事务增强，这里用的是spring提供的特性-->
    <tx:advice id="tx" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="has*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="pc" expression="execution(* com.gnnt.service..*impl.*(..))" />
        <!--把事务控制在Service层-->
        <aop:advisor pointcut-ref="pc" advice-ref="tx" />
    </aop:config>

</beans>