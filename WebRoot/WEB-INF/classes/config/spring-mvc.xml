<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- 开启了自动扫描,发现service层并不能回滚。
        启动组件扫描，排除@Service组件，注：如果此处必须排除掉@Service组件 
    原因：springmvc的配置文件与spring的配置文件不是同时加载，如果这边不进行这样的设置，
    那么，spring就会将所有带@Service注解的类都扫描到容器中，
    等到加载spring的配置文件的时候，会因为容器已经存在Service类，
    使得cglib将不对Service进行代理，直接导致的结果就是在spring配置文件中的事务配置不起作用，发生异常时，无法对数据进行回滚 
    -->
    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->  
    <context:component-scan base-package="com.gnnt.controller" /> 

    <!-- 启动Spring定时任务 --> 
    <task:annotation-driven/>

    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --> 
    <mvc:annotation-driven/>    

    <!-- 定义跳转的文件的前后缀 ，视图模式配置-->  
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->  
        <property name="prefix" value="WEB-INF/jsp/" />  
        <property name="suffix" value=".jsp" />  
    </bean>       

    <!-- 处理静态资源 -->
    <mvc:default-servlet-handler/>
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" /> 
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"> 
        <property name="favorPathExtension" value="false" />
        <property name="favorParameter" value="false" /> 
        <property name="ignoreAcceptHeader" value="false" /> 
        <property name="mediaTypes" > 
        <value>
            atom=application/atom+xml
            html=text/html
            json=application/json
            *=*/*
        </value> 
        </property>
    </bean>

</beans>  